/* tslint:disable */
/* eslint-disable */
/**
 * Citizen Proposal App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommentQueryResponseDto } from './CommentQueryResponseDto';
import {
    CommentQueryResponseDtoFromJSON,
    CommentQueryResponseDtoFromJSONTyped,
    CommentQueryResponseDtoToJSON,
    CommentQueryResponseDtoToJSONTyped,
} from './CommentQueryResponseDto';

/**
 * The DTO used as the response body of multiple-comment queries.
 * @export
 * @interface CommentsQueryResponseDto
 */
export interface CommentsQueryResponseDto {
    /**
     * The total number of comments there are. Used for pagination purposes.
     * @type {number}
     * @memberof CommentsQueryResponseDto
     */
    count: number;
    /**
     * The returned comments.
     * @type {Array<CommentQueryResponseDto>}
     * @memberof CommentsQueryResponseDto
     */
    comments: Array<CommentQueryResponseDto>;
}

/**
 * Check if a given object implements the CommentsQueryResponseDto interface.
 */
export function instanceOfCommentsQueryResponseDto(value: object): value is CommentsQueryResponseDto {
    if (!('count' in value) || value['count'] === undefined) return false;
    if (!('comments' in value) || value['comments'] === undefined) return false;
    return true;
}

export function CommentsQueryResponseDtoFromJSON(json: any): CommentsQueryResponseDto {
    return CommentsQueryResponseDtoFromJSONTyped(json, false);
}

export function CommentsQueryResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentsQueryResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'count': json['count'],
        'comments': ((json['comments'] as Array<any>).map(CommentQueryResponseDtoFromJSON)),
    };
}

export function CommentsQueryResponseDtoToJSON(json: any): CommentsQueryResponseDto {
    return CommentsQueryResponseDtoToJSONTyped(json, false);
}

export function CommentsQueryResponseDtoToJSONTyped(value?: CommentsQueryResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'count': value['count'],
        'comments': ((value['comments'] as Array<any>).map(CommentQueryResponseDtoToJSON)),
    };
}

