/* tslint:disable */
/* eslint-disable */
/**
 * Citizen Proposal App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserQueryResponseDto } from './UserQueryResponseDto';
import {
    UserQueryResponseDtoFromJSON,
    UserQueryResponseDtoFromJSONTyped,
    UserQueryResponseDtoToJSON,
    UserQueryResponseDtoToJSONTyped,
} from './UserQueryResponseDto';

/**
 * The DTO used as the response body of single-comment queries.
 * @export
 * @interface CommentQueryResponseDto
 */
export interface CommentQueryResponseDto {
    /**
     * The primary key.
     * @type {number}
     * @memberof CommentQueryResponseDto
     */
    id: number;
    /**
     * The ID of the post under which this comment belongs.
     * @type {number}
     * @memberof CommentQueryResponseDto
     */
    parentPostId: number;
    /**
     * The text of this comment.
     * @type {string}
     * @memberof CommentQueryResponseDto
     */
    content: string;
    /**
     * The date when this comment was posted.
     * @type {Date}
     * @memberof CommentQueryResponseDto
     */
    postedTime: Date;
    /**
     * 
     * @type {UserQueryResponseDto}
     * @memberof CommentQueryResponseDto
     */
    author: UserQueryResponseDto;
}

/**
 * Check if a given object implements the CommentQueryResponseDto interface.
 */
export function instanceOfCommentQueryResponseDto(value: object): value is CommentQueryResponseDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('parentPostId' in value) || value['parentPostId'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('postedTime' in value) || value['postedTime'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    return true;
}

export function CommentQueryResponseDtoFromJSON(json: any): CommentQueryResponseDto {
    return CommentQueryResponseDtoFromJSONTyped(json, false);
}

export function CommentQueryResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentQueryResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'parentPostId': json['parentPostId'],
        'content': json['content'],
        'postedTime': (new Date(json['postedTime'])),
        'author': UserQueryResponseDtoFromJSON(json['author']),
    };
}

export function CommentQueryResponseDtoToJSON(json: any): CommentQueryResponseDto {
    return CommentQueryResponseDtoToJSONTyped(json, false);
}

export function CommentQueryResponseDtoToJSONTyped(value?: CommentQueryResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'parentPostId': value['parentPostId'],
        'content': value['content'],
        'postedTime': ((value['postedTime']).toISOString()),
        'author': UserQueryResponseDtoToJSON(value['author']),
    };
}

