/* tslint:disable */
/* eslint-disable */
/**
 * Citizen Proposal App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  UserQueryResponseDto,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UserQueryResponseDtoFromJSON,
    UserQueryResponseDtoToJSON,
} from '../models/index';

export interface ApiUsersIdGetRequest {
    id: number;
}

export interface ApiUsersLoginPostRequest {
    username: string;
    password: string;
}

export interface ApiUsersRegisterPostRequest {
    username: string;
    password: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Gets the info of the currently logged in user.
     */
    async apiUsersCurrentGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserQueryResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserQueryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets the info of the currently logged in user.
     */
    async apiUsersCurrentGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserQueryResponseDto> {
        const response = await this.apiUsersCurrentGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets the info of a user using its ID.
     */
    async apiUsersIdGetRaw(requestParameters: ApiUsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserQueryResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserQueryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets the info of a user using its ID.
     */
    async apiUsersIdGet(requestParameters: ApiUsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserQueryResponseDto> {
        const response = await this.apiUsersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in using a username and a password.
     */
    async apiUsersLoginPostRaw(requestParameters: ApiUsersLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling apiUsersLoginPost().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling apiUsersLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['username'] != null) {
            formParams.append('Username', requestParameters['username'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('Password', requestParameters['password'] as any);
        }

        const response = await this.request({
            path: `/api/Users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logs in using a username and a password.
     */
    async apiUsersLoginPost(requestParameters: ApiUsersLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the session cookie if it exists.
     */
    async apiUsersLogoutDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/logout`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the session cookie if it exists.
     */
    async apiUsersLogoutDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersLogoutDeleteRaw(initOverrides);
    }

    /**
     * Registers a new user. If the registration is successful, also logs in the just-registered user.
     */
    async apiUsersRegisterPostRaw(requestParameters: ApiUsersRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling apiUsersRegisterPost().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling apiUsersRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['username'] != null) {
            formParams.append('Username', requestParameters['username'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('Password', requestParameters['password'] as any);
        }

        const response = await this.request({
            path: `/api/Users/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Registers a new user. If the registration is successful, also logs in the just-registered user.
     */
    async apiUsersRegisterPost(requestParameters: ApiUsersRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersRegisterPostRaw(requestParameters, initOverrides);
    }

}
