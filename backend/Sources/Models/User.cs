using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Security.Claims;
using System.Threading.Tasks;

namespace CitizenProposalApp;

/// <summary>
/// Represents a registered user in this app.
/// </summary>
[Index(nameof(Username), IsUnique = true)]
public class User
{
    /// <summary>
    /// The primary key.
    /// </summary>
    public int Id { get; init; }

    /// <summary>
    /// The username.
    /// </summary>
    [MaxLength(32)]
    public required string Username { get; set; }

    /// <summary>
    /// Degree of parallelism used by the Argon2id algorithm.
    /// </summary>
    public int DegreeOfParallelism { get; set; }

    /// <summary>
    /// Memory used by the Argon2id algorithm in kibibytes.
    /// </summary>
    public int MemorySizeKib { get; set; }

    /// <summary>
    /// Number of iterations used by the Argon2id algorithm.
    /// </summary>
    public int IterationCount { get; set; }

    /// <summary>
    /// Password salt used by the Argon2id algorithm.
    /// </summary>
    [MaxLength(64)]
    public required byte[] Salt { get; set; }

    /// <summary>
    /// Argon2id hash of the password.
    /// </summary>
    [MaxLength(64)]
    public required byte[] PasswordHash { get; set; }

    /// <summary>
    /// If this is <see langword="false"/>, then all password and hashing related properties are ignored and any login attempt immediately fails.
    /// </summary>
    public bool Loginable { get; set; }

    /// <summary>
    /// The <see cref="Post"/>s posted by this user.
    /// </summary>
    public required ICollection<Post> Posts { get; set; }

    /// <summary>
    /// The <see cref="Session"/>s that authenticate this user.
    /// </summary>
    public required ICollection<Session> Sessions { get; set; }

    /// <summary>
    /// The <see cref="Comment"/>s made by this user.
    /// </summary>
    public required ICollection<Comment> Comments { get; set; }

    /// <summary>
    /// Gets an <see cref="User"/> instance from a <see cref="ClaimsPrincipal"/> generated by <see cref="SessionTokenAuthenticationHandler"/>.
    /// </summary>
    /// <param name="users">The <see cref="DbSet{TEntity}"/> containing the <see cref="User"/>s.</param>
    /// <param name="principal">The <see cref="ClaimsPrincipal"/> generated by <see cref="SessionTokenAuthenticationHandler"/>.</param>
    /// <returns>A <see cref="User"/> instance if <paramref name="principal"/> contains a <see cref="Claim"/> that has type <see cref="ClaimTypes.NameIdentifier"/> that has a value of the <see cref="Id"/> of the <see cref="User"/> to get. <see langword="null"/> if no <see cref="User"/> with that <see cref="Id"/> is found.</returns>
    /// <exception cref="InvalidOperationException"><paramref name="principal"/> doesn't contain a <see cref="Claim"/> with the type <see cref="ClaimTypes.NameIdentifier"/>.</exception>
    internal static async Task<User?> GetUserFromClaimsPrincipal(DbSet<User> users, ClaimsPrincipal principal)
    {
        Claim? userIdClaim = principal.FindFirst(ClaimTypes.NameIdentifier)
            ?? throw new InvalidOperationException($"{nameof(principal)} doesn't contain a {nameof(Claim)} that has type {nameof(ClaimTypes.NameIdentifier)}.");
        User? result = await users.FindAsync(int.Parse(userIdClaim.Value, CultureInfo.InvariantCulture));
        return result;
    }
}